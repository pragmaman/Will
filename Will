// SPDX-License-Identifier:MIT 
pragma solidity ^0.8.20 ;

contract Will {
 address public owner ; 
 uint    fortune ;
 bool deseased ;

 constructor() payable  {
    owner = msg.sender ; // msg sender represents address that 
                           //   is being called 
    fortune = msg.value ; // msg value tells us how much ether 
                            //  is being sent
    deseased = false ;
 }
  /* create modifier so the only person who can call the 
   contract is the owner */

   modifier onlyOwner {
    require(msg.sender == owner) ;
    _;
   }

 // create modifier so that we only allocate funds if friends grandparent 
 // deseased 

    modifier mustBeDeseased {
      require( deseased == true) ;
        _;     
    }
    // list of family wallets 
   address payable[]  beneficiers ;
    // map through inheritance
   mapping(address => uint) allocation ;

   // set inheritance function for each address 

    function setInheritance(address payable wallet , uint amount) public onlyOwner {
// to add wallets to the family wallets .push method
     beneficiers.push(wallet);
     allocation[wallet] = amount ;


    }
    // pay each family member based on their wallet 
     function payout() private  mustBeDeseased    {
        //with a for loop you can loop through things and set conditions
        for(uint i= 0; i < beneficiers.length; i++) {
            beneficiers[i].transfer(allocation[beneficiers[i]]) ;
            // transferring funds from contracts address to receivers address        
        }

     }

     function hasDeseased() public onlyOwner {
        deseased = true ;
        payout() ;
     }



}
